#!/usr/bin/env python
# Usage: th fit
# Summary: Fit models
# Help: th fit -h

# import sys
import os
import os.path
# from os.path import isfile, join
import argparse
from IPython import embed as shell

import th.note  # noqa
from th.tmpl import tex_renderer
from th import tools

import imp


def get_cli_args():
    parser = argparse.ArgumentParser(
        description='Generate reports: latex tables and plots.')
    parser.add_argument(
        '--complete',  help='Show completion list', action='store_true')
    parser.add_argument(
        '--name',  help='Report name')

    parser.add_argument(
        '--profile',  help='Profile name')

    return parser.parse_args()


def get_py_root():
    return os.path.join(
        os.environ["_TH_ROOT"], "lib", "python", "th", "note")


def get_cfg_root():
    return os.path.join(
        os.environ["_TH_ROOT"], "share", "note")


def get_cfg(name):
    path = os.path.join(get_cfg_root(), "%s.json" % name)
    if os.path.isfile(path):
        return tools.json(path)
    else:
        return {}


def get_reports():
    ret = []
    path = get_py_root()
    for entry in os.listdir(path):
        if os.path.isfile(os.path.join(path, entry)):
            ret.append(os.path.basename(entry).split('.')[0])

    return ret


def complete():
    for entry in get_reports():
        print "--name=%s" % entry
    print("--profile")


def get_generator(name):
    full_name = "th.note.%s" % name
    path = os.path.join(get_py_root(), "%s.py" % name)

    return imp.load_source(full_name, path)


def main():
    cli_args = get_cli_args()
    if cli_args.complete:
        complete()
        exit(0)

    generator = get_generator(cli_args.name)
    generator.run(cfg=get_cfg(cli_args.name),
                  renderer=tex_renderer(),
                  name=cli_args.profile)
    # shell()


if __name__ == '__main__':
    main()
